version: 2
jobs:
  test:
    docker:
      - image: circleci/node:10.16.0
    working_directory: ~/vue/test
    steps:
      - checkout
      - run:
          name: yarn install
          command: yarn install && yarn global add firebase && yarn global add firebaseui && yarn global add firebaseui-ja && yarn global add moment && yarn global add node-gyp && yarn global add moment && yarn global add @vue/cli && yarn global add vue2-google-maps && yarn global add vue-loading-overlay
      - save_cache:
          name: save_cache
          paths:
            - node_modules
          key: node-10-dependencies-{{ checksum "package.json" }}
      - run:
          name: yarn lint
          command: yarn lint
      - run:
          name: yarn test
          command: yarn test
# EC2にSSH接続し、ビルドを実行
  build:
    machine:
      image: circleci/classic:edge
    steps:
      # CircleCIに登録した秘密鍵を呼び出す。
      - add_ssh_keys:
          fingerprints:
            - "46:4c:fd:fd:5f:a4:25:e4:a1:0e:be:a6:18:d5:98:32"
      - run:
          name: DockerImage Build -> DockerComposeUP
          command: ssh ${USER_NAME}@${HOST_NAME} 'cd /work/docker-portfolio/vue-docker/app && git pull origin master && sudo rm -rf node_modules ; cd /work/docker-portfolio/ && docker stop vue_portfolio ; docker rm vue_portfolio ; docker rmi -f docker-portfolio_vueapp node ;docker-compose up -d'
# EC2にSSH接続し、コンテナを実行
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      # CircleCIに登録した秘密鍵を呼び出す。
      - add_ssh_keys:
          fingerprints:
            - "46:4c:fd:fd:5f:a4:25:e4:a1:0e:be:a6:18:d5:98:32"
      - run:
          name: DockerExec -> yarn install -> yarn build -> yarn start &
          command: ssh ${USER_NAME}@${HOST_NAME} 'cd /work/docker-portfolio/ && docker exec -it vue_portfolio yarn install && docker exec -it vue_portfolio yarn build && docker exec -it vue_portfolio yarn start &'
workflows:
    version: 2
    test_and_build_and_deploy:
        jobs:
            - test
            - build:
                requires:
                    - test
                filters:
                    branches:
                        only: master
            - deploy:
                requires:
                    - build
                filters:
                    branches:
                        only: master
